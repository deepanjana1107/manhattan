{"name":"Manhattan","tagline":"Open Source Geo Project Manhattan","body":"# Manhattan Tourist Itinerary\r\n\r\nThe Manhattan Tourist Itinerary project (called 'Manhattan' in short) has been created in ExtJS’ MVC (Model-View-Controller) programming style. It is built with the following components.\r\n\r\n- Server Side\r\n\t- PostGIS 2.1 with PostgreSQL 9.3 with pgRouting 2\r\n\t- GeoServer 2.5\r\n\t- PHP \r\n- Client Side\r\n\t- OpenLayers 2.13.1\r\n\t- GeoExt 2.0.2\r\n\t- ExtJS 4.2\r\n\r\n- Folder Structure\r\n\t- 'app': stores the relevant model, view, controller files. For the 'Manhattan' application, no model is used\r\n\t- 'library': stores the relevant OpenLayers 2, GeoExt 2, and Ext.JS library files\r\n\t- 'resources': contains client application relevant non-JavaScript files such as images (of manhattan), map help, navigation help, etc.\r\n\t\t- A PHP file (route_multiple.php) inside the resources folder is used by the application to access pgRouting\r\n\t- 'database': contains two database dump files which can be used to set up the database \r\n\r\nAuthors: Franziska Blumenschein & Deepanjana Majumdar\r\n\r\n## How to load ‘Manhattan’ client application in Apache httpd web server\r\n\r\n- The application has been tested with Apache httpd 2.4.7\r\n- Clone this repository into your local folder (say, 'Manhattan')\r\n- Copy the ‘Manhattan’ folder in /var/www/html folder of OSGeo-Live\r\n- The index.html within 'Manhattan' will be visible in the browser at location http://localhost:80/manhattan/ (localhost/manhattan as shortcut)\r\n- If you want to create more advanced or virtual locations, then create a new configuration in /etc/apache2/conf-available folder\r\n\r\n## Setting up the Server Side\r\n\r\nIf you are using OSGeo Live, then the following components are already enabled for you. If not, please set these up individually.\r\n\r\n- A PostgreSQL database containing different tables that store geometry data (‘features’) corresponding to the different ‘layers’ are displayed in the ‘Manhattan’ client\r\n\r\n- pgRouting extension has been added (by default) to PostgreSQL database. The ‘ways’ table is pgRouting geometry (the_geom) enabled which is returned to the client application (‘Manhattan’) via PHP\r\n\r\n- GeoServer is the WMS service provider. It exposes the different PostgreSQL tables to the ‘Manhattan’ application via WMS calls (in OSGeo Live via http://localhost:8082)\r\n\r\n\r\n## Steps in Preparing the Data\r\n\r\n- Get data from weogeo market (http://market.weogeo.com/datasets/osm-openstreetmap-new-york-ny-metro-region), here all needed layers are available\r\n   Needed layers (as ESRI shapefile): highway (streets), leisure (parks), tourism (museums), buildings, amenity (theatres)\r\n   \r\n- Clip data to Manhattan boundaries\r\n\r\n- Clean up data, remove unnecessary attributes (necessary: ID, geom, name)\r\n\r\n- Create the following layers: theatre_poly (theatre polygons), buildins_poly (important buildings polygon features), theatre (theatre point features), \r\n   museums (museums point features), Manhattan_parks (park polygon features), museum_poly (museum polygon features)\r\n   \r\n- Modify the data, add the homepage and address columns and fill them manually either via pgAdmin or QGIS\r\n\r\n- Style layers in QGIS and store them as .sld files\r\n\r\n- Add layers to your PostGIS database\r\n\r\n- Publish layers from the PostGIS database on Geoserver\r\n\t- Create a workspace called \"tour_manhattan\"\r\n\t- Create a store called \"manhattan\"\r\n\t- Add the layers described under point 4\r\n\t- Load the .sld files under style in GeoServer\r\n\r\nOtherwise the database dump (database_dump.sql), which is also used as a backup, is containing all needed layers. It gives the opportunity to recreate the complete database within a SQL query, so the user only needs to publish these database tables.\r\n\r\n## PgRouting\r\n\r\nIn order to provide the user a routing functionality the following steps need to be done. For further questions the FOSS4G workshop \"Routing with pgRouting\" provides further information.\r\n - http://download.osgeo.org/pgrouting/foss4g2010/workshop/docs/pgRoutingWorkshop.pdf\r\n - http://workshop.pgrouting.org/chapters/php_server.html\r\n\r\n- Create database \"routing\" in PostgreSQL \r\n\r\n- Add postgis and pgRouting extension to the database (see workshop chapter 3.3)\r\n  (-- add PostGIS functions\r\n\tCREATE EXTENSION postgis;\r\n\r\n\t-- add pgRouting core functions\r\n\tCREATE EXTENSION pgrouting;)\r\n\r\n- Create a connection between this database and QGIS (Add PostGIS Table in QGIS)\r\n\r\n- Layer highway (only the lines are needed):\r\n\r\n\t- change CRS from EPSG 3857 (WGS84 Web Mercator) to 4326 (WGS 84 / Latlong) after loading the data to QGIS\r\n\t\r\n\t- Explode lines (f.e. with QGIS Processing Toolbox: Geoalgorithms -> Vector geom tools -> Explode lines. \r\n\t  This step is necessary to create junctions wherever streets will intersect. Otherwise streets will only intersect in the start and end point.\r\n\t  \r\n\t- Add new columns to the attribute table: -> gid (=$id)\r\n\t\t\t\t\t\t  -> length (=$length)\r\n\t\t\t\t\t\t  -> the_geom (=$geom)\r\n\t\r\n    - Use QGIS DB Manager to add .shp-file layer as table \"ways\" to the PostGIS database. Choose target SRID 4326, create a spatial index, create single-part geometries \r\n\t  instead of multi-part and the_geom as the geometry column\r\n\t  \r\n\t- Run query \"UPDATE ways SET the_geom = ST_Force_2D(geom)\"\r\n\r\n- Follow the further instructions in the PgRouting workshop from FOSS4G (http://workshop.pgrouting.org/chapters/topology.html) with chapter 4 (Create a Network Topology) and chapter 5 (PgRouting Algorithms)\r\n  \r\nAfter following this instructions the network topology is implemented and together with the published layers on geoserver and the provided codes the application should work.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}